# Example for use of DifferentialEquations.jl
# CHEME5440/7770 - Spring 2021
# To install the package, use the following commands inside the Julia REPL:
# using Pkg
# Pkg.add("DifferentialEquations")
# For this example, you will also need Plots; To add:
# Pkg.add("Plots")

# ------------------------------------------------------------ #
# Lorenz system example
# dX/dt = σ(Y-X)
# dY/dt = X(ρ - Z) - Y
# dZ/dt = XY - βZ
# Based on DifferentialEquations.jl tutorial

using DifferentialEquations     # Include DifferentialEquations.jl
using Plots                     # Include Plots.jl for plotting
gr(show = true)  # Use the gr backend for plotting and show plots


# Model parameters
l = 0.001           #µM
VRmax = 0.1         #s-1*µM-1
alpha1 = l/(1+l)    #s-1
alpha2 = 1/(1+l)    #s-1
abp = 0.1           #s-1*µM-1
dbp = 0.01          #s-1
kbp = 1             #s-1
ab = 1              #s-1*µM-1
db = 1              #s-1
kb = 0              #s-1
beta1 = 2.5*l/(1+l) #s-1
k1 = 1              #s-1
k2 = 1              #s-1

# -------------------------- Lorenz Model -------------------------------------
# du: Diffrerential equations, [dX/dt, dY/dt, dZ/dt]
# u: Time-dependent variables, [X, Y, Z]; u[1] = X; u[2] = Y; u[3] = Z
# p: Additional model parameters (none in this example)
# t: time 
# Note "!" point after function name is a Julia convention that indicates 
# that the function will modify values in one or more of the function arguments.  In this case,
# lorenz! will modify values in the input vector, du
function lorenz!(du,u,p,t)
 du[1] = u[7]*kbp + u[6]*kb - VRmax               #du[1]=dE0/dt
 du[2] = VRmax + beta1*(u[7]+u[6]) + u[3]*alpha1 - u[2]*alpha2    #du[2] = dE1/dt
 du[3] = u[2]*alpha2 + u[7]*dbp + u[6]*db - u[2]*u[5]*abp - u[1]*u[4]*ab - u[3]*alpha1        #du[3] = dE1*/dt
 du[4] = u[6]*(kb+beta1+db) + u[5]*k1 - u[4]*(u[3]*ab+k2)       #du[4]=dB/dt
 du[5] = u[7]*(kbp+beta1+dbp) + u[4]*k2 - u[5]*(u[3]*abp+k1)    #du[5]=dBp/dt
 du[6] = u[3]*u[4]*ab - u[6]*(kb+db+beta1)          #du[6]=dE1*B/dt
 du[7] = u[3]*u[5]*abp - u[7]*(kbp+dbp+beta1)       #du[7]=dE1*Bp/dt
end

# ------------- SOLVE THE MODEL WITH DIFFERENTIALEQUATIONS.jl -------------------
E0 = 10.0               #initial value of E0
E1 = 10.0                #initial value of E1
E2 = 10.0                #initial value of E1*
B = 2.0                #initial value of B
Bp = 2.0                #initial value of Bp
E1B = 0.0                #initial value of E1*B
E1Bp = 0.0                #initial value of E1*Bp
u0 = [E0; E1; E2; B; Bp; E1B; E1Bp]       #initial state vector
tspan = (0.0,500.0)                     #time interval (start time, end time)
prob = ODEProblem(lorenz!,u0,tspan)     #Create an ODE problem for the Lorenz fxn
sol = solve(prob)                       #Solve the system

# ------------- MAKE SOME PLOTS OF THE RESULTS WITH PLOTS.jl ---------------------
#Plot the results; X, Y, and Z vs time
plt1 = plot(sol, xaxis="time", yaxis = "E0, E1, or E1*", label=["E0" "E1" "E1*"])
display(plt1)

#Plot the results; the vars=(0,3) argument specifies to plot Z (column 3 of sol)
#vs t
plt2 = plot(sol,vars=(0,3), xaxis="time", yaxis = "E1*", legend = false)
display(plt2)

#Plot the results; the vars=(1,2,3) argument specifies to plot X vs Y vs Z
plt3 = plot(sol,vars=(1,2,3), xaxis="E0", yaxis="E1", zaxis="E1*", legend = false)
display(plt3)

#Save the three plots as PNG files
savefig(plt1, "./plot1.png")    
savefig(plt2, "./plot2.png")  
savefig(plt3, "./plot3.png")    